//*
// This file defines various configuration options for the Hiddify application.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: v2/hiddifyoptions/hiddify_options.proto

package hiddifyoptions

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// DomainStrategy defines the strategies for IP address preference when resolving domain names.
type DomainStrategy int32

const (
	DomainStrategy_as_is       DomainStrategy = 0 // As it is.
	DomainStrategy_prefer_ipv4 DomainStrategy = 1 // Prefer IPv4 addresses.
	DomainStrategy_prefer_ipv6 DomainStrategy = 2 // Prefer IPv6 addresses.
	DomainStrategy_ipv4_only   DomainStrategy = 3 // Only use IPv4 addresses.
	DomainStrategy_ipv6_only   DomainStrategy = 4 // Only use IPv6 addresses.
)

// Enum value maps for DomainStrategy.
var (
	DomainStrategy_name = map[int32]string{
		0: "as_is",
		1: "prefer_ipv4",
		2: "prefer_ipv6",
		3: "ipv4_only",
		4: "ipv6_only",
	}
	DomainStrategy_value = map[string]int32{
		"as_is":       0,
		"prefer_ipv4": 1,
		"prefer_ipv6": 2,
		"ipv4_only":   3,
		"ipv6_only":   4,
	}
)

func (x DomainStrategy) Enum() *DomainStrategy {
	p := new(DomainStrategy)
	*p = x
	return p
}

func (x DomainStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_v2_hiddifyoptions_hiddify_options_proto_enumTypes[0].Descriptor()
}

func (DomainStrategy) Type() protoreflect.EnumType {
	return &file_v2_hiddifyoptions_hiddify_options_proto_enumTypes[0]
}

func (x DomainStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainStrategy.Descriptor instead.
func (DomainStrategy) EnumDescriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{0}
}

// *
// HiddifyOptions defines the configuration options for the Hiddify application.
type HiddifyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableFullConfig        bool            `protobuf:"varint,1,opt,name=enable_full_config,json=enableFullConfig,proto3" json:"enable_full_config,omitempty"`                          // Enables full configuration options.
	LogLevel                string          `protobuf:"bytes,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`                                                     // Specifies the logging level (e.g., INFO, DEBUG).
	LogFile                 string          `protobuf:"bytes,3,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`                                                        // Path to the log file.
	EnableClashApi          bool            `protobuf:"varint,4,opt,name=enable_clash_api,json=enableClashApi,proto3" json:"enable_clash_api,omitempty"`                                // Indicates whether the Clash API is enabled.
	ClashApiPort            uint32          `protobuf:"varint,5,opt,name=clash_api_port,json=clashApiPort,proto3" json:"clash_api_port,omitempty"`                                      // Port for the Clash API (using uint32 for compatibility).
	WebSecret               string          `protobuf:"bytes,6,opt,name=web_secret,json=webSecret,proto3" json:"web_secret,omitempty"`                                                  // Secret key for accessing the Clash API.
	Region                  string          `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`                                                                         // Region for the application.
	BlockAds                bool            `protobuf:"varint,8,opt,name=block_ads,json=blockAds,proto3" json:"block_ads,omitempty"`                                                    // If true, blocks ads.
	UseXrayCoreWhenPossible bool            `protobuf:"varint,9,opt,name=use_xray_core_when_possible,json=useXrayCoreWhenPossible,proto3" json:"use_xray_core_when_possible,omitempty"` // If true, use XRay core when possible.
	Rules                   []*Rule         `protobuf:"bytes,10,rep,name=rules,proto3" json:"rules,omitempty"`                                                                          // List of routing rules for traffic management.
	Warp                    *WarpOptions    `protobuf:"bytes,11,opt,name=warp,proto3" json:"warp,omitempty"`                                                                            // Configuration options for Warp.
	Warp2                   *WarpOptions    `protobuf:"bytes,12,opt,name=warp2,proto3" json:"warp2,omitempty"`                                                                          // Additional configuration options for a second Warp instance.
	Mux                     *MuxOptions     `protobuf:"bytes,13,opt,name=mux,proto3" json:"mux,omitempty"`                                                                              // Configuration options for multiplexing.
	TlsTricks               *TLSTricks      `protobuf:"bytes,14,opt,name=tls_tricks,json=tlsTricks,proto3" json:"tls_tricks,omitempty"`                                                 // Options for TLS tricks.
	DnsOptions              *DNSOptions     `protobuf:"bytes,15,opt,name=dns_options,json=dnsOptions,proto3" json:"dns_options,omitempty"`                                              // DNS-related options.
	InboundOptions          *InboundOptions `protobuf:"bytes,16,opt,name=inbound_options,json=inboundOptions,proto3" json:"inbound_options,omitempty"`                                  // Inbound connection options.
	UrlTestOptions          *URLTestOptions `protobuf:"bytes,17,opt,name=url_test_options,json=urlTestOptions,proto3" json:"url_test_options,omitempty"`                                // URL test configuration options.
	RouteOptions            *RouteOptions   `protobuf:"bytes,18,opt,name=route_options,json=routeOptions,proto3" json:"route_options,omitempty"`                                        // Routing-related options.
}

func (x *HiddifyOptions) Reset() {
	*x = HiddifyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddifyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddifyOptions) ProtoMessage() {}

func (x *HiddifyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddifyOptions.ProtoReflect.Descriptor instead.
func (*HiddifyOptions) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{0}
}

func (x *HiddifyOptions) GetEnableFullConfig() bool {
	if x != nil {
		return x.EnableFullConfig
	}
	return false
}

func (x *HiddifyOptions) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *HiddifyOptions) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *HiddifyOptions) GetEnableClashApi() bool {
	if x != nil {
		return x.EnableClashApi
	}
	return false
}

func (x *HiddifyOptions) GetClashApiPort() uint32 {
	if x != nil {
		return x.ClashApiPort
	}
	return 0
}

func (x *HiddifyOptions) GetWebSecret() string {
	if x != nil {
		return x.WebSecret
	}
	return ""
}

func (x *HiddifyOptions) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *HiddifyOptions) GetBlockAds() bool {
	if x != nil {
		return x.BlockAds
	}
	return false
}

func (x *HiddifyOptions) GetUseXrayCoreWhenPossible() bool {
	if x != nil {
		return x.UseXrayCoreWhenPossible
	}
	return false
}

func (x *HiddifyOptions) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *HiddifyOptions) GetWarp() *WarpOptions {
	if x != nil {
		return x.Warp
	}
	return nil
}

func (x *HiddifyOptions) GetWarp2() *WarpOptions {
	if x != nil {
		return x.Warp2
	}
	return nil
}

func (x *HiddifyOptions) GetMux() *MuxOptions {
	if x != nil {
		return x.Mux
	}
	return nil
}

func (x *HiddifyOptions) GetTlsTricks() *TLSTricks {
	if x != nil {
		return x.TlsTricks
	}
	return nil
}

func (x *HiddifyOptions) GetDnsOptions() *DNSOptions {
	if x != nil {
		return x.DnsOptions
	}
	return nil
}

func (x *HiddifyOptions) GetInboundOptions() *InboundOptions {
	if x != nil {
		return x.InboundOptions
	}
	return nil
}

func (x *HiddifyOptions) GetUrlTestOptions() *URLTestOptions {
	if x != nil {
		return x.UrlTestOptions
	}
	return nil
}

func (x *HiddifyOptions) GetRouteOptions() *RouteOptions {
	if x != nil {
		return x.RouteOptions
	}
	return nil
}

// *
// IntRange defines a range of integers for various configurations.
// It includes the starting and ending values of the range.
type IntRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From int32 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"` // Starting value of the range.
	To   int32 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`     // Ending value of the range.
}

func (x *IntRange) Reset() {
	*x = IntRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntRange) ProtoMessage() {}

func (x *IntRange) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntRange.ProtoReflect.Descriptor instead.
func (*IntRange) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{1}
}

func (x *IntRange) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *IntRange) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

// *
// DNSOptions defines DNS-related configuration options.
type DNSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDnsAddress        string         `protobuf:"bytes,1,opt,name=remote_dns_address,json=remoteDnsAddress,proto3" json:"remote_dns_address,omitempty"`                                                            // Remote DNS server address.
	RemoteDnsDomainStrategy DomainStrategy `protobuf:"varint,2,opt,name=remote_dns_domain_strategy,json=remoteDnsDomainStrategy,proto3,enum=hiddifyoptions.DomainStrategy" json:"remote_dns_domain_strategy,omitempty"` // Strategy for resolving domains with remote DNS.
	DirectDnsAddress        string         `protobuf:"bytes,3,opt,name=direct_dns_address,json=directDnsAddress,proto3" json:"direct_dns_address,omitempty"`                                                            // Direct DNS server address.
	DirectDnsDomainStrategy DomainStrategy `protobuf:"varint,4,opt,name=direct_dns_domain_strategy,json=directDnsDomainStrategy,proto3,enum=hiddifyoptions.DomainStrategy" json:"direct_dns_domain_strategy,omitempty"` // Strategy for resolving domains with direct DNS.
	IndependentDnsCache     bool           `protobuf:"varint,5,opt,name=independent_dns_cache,json=independentDnsCache,proto3" json:"independent_dns_cache,omitempty"`                                                  // If true, enables independent DNS caching.
	EnableFakeDns           bool           `protobuf:"varint,6,opt,name=enable_fake_dns,json=enableFakeDns,proto3" json:"enable_fake_dns,omitempty"`                                                                    // If true, enables fake DNS responses.
	EnableDnsRouting        bool           `protobuf:"varint,7,opt,name=enable_dns_routing,json=enableDnsRouting,proto3" json:"enable_dns_routing,omitempty"`                                                           // If true, enables DNS routing.
}

func (x *DNSOptions) Reset() {
	*x = DNSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSOptions) ProtoMessage() {}

func (x *DNSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSOptions.ProtoReflect.Descriptor instead.
func (*DNSOptions) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{2}
}

func (x *DNSOptions) GetRemoteDnsAddress() string {
	if x != nil {
		return x.RemoteDnsAddress
	}
	return ""
}

func (x *DNSOptions) GetRemoteDnsDomainStrategy() DomainStrategy {
	if x != nil {
		return x.RemoteDnsDomainStrategy
	}
	return DomainStrategy_as_is
}

func (x *DNSOptions) GetDirectDnsAddress() string {
	if x != nil {
		return x.DirectDnsAddress
	}
	return ""
}

func (x *DNSOptions) GetDirectDnsDomainStrategy() DomainStrategy {
	if x != nil {
		return x.DirectDnsDomainStrategy
	}
	return DomainStrategy_as_is
}

func (x *DNSOptions) GetIndependentDnsCache() bool {
	if x != nil {
		return x.IndependentDnsCache
	}
	return false
}

func (x *DNSOptions) GetEnableFakeDns() bool {
	if x != nil {
		return x.EnableFakeDns
	}
	return false
}

func (x *DNSOptions) GetEnableDnsRouting() bool {
	if x != nil {
		return x.EnableDnsRouting
	}
	return false
}

// *
// InboundOptions defines the configuration options for inbound connections.
type InboundOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableTun        bool   `protobuf:"varint,1,opt,name=enable_tun,json=enableTun,proto3" json:"enable_tun,omitempty"`                        // If true, enables TUN interface.
	EnableTunService bool   `protobuf:"varint,2,opt,name=enable_tun_service,json=enableTunService,proto3" json:"enable_tun_service,omitempty"` // If true, enables TUN service.
	SetSystemProxy   bool   `protobuf:"varint,3,opt,name=set_system_proxy,json=setSystemProxy,proto3" json:"set_system_proxy,omitempty"`       // If true, sets the system proxy.
	MixedPort        uint32 `protobuf:"varint,4,opt,name=mixed_port,json=mixedPort,proto3" json:"mixed_port,omitempty"`                        // Port for mixed traffic (using uint32 for compatibility).
	TproxyPort       uint32 `protobuf:"varint,5,opt,name=tproxy_port,json=tproxyPort,proto3" json:"tproxy_port,omitempty"`                     // Port for TProxy connections (using uint32 for compatibility).
	LocalDnsPort     uint32 `protobuf:"varint,6,opt,name=local_dns_port,json=localDnsPort,proto3" json:"local_dns_port,omitempty"`             // Port for local DNS service (using uint32 for compatibility).
	Mtu              uint32 `protobuf:"varint,7,opt,name=mtu,proto3" json:"mtu,omitempty"`                                                     // Maximum Transmission Unit size (using uint32 for compatibility).
	StrictRoute      bool   `protobuf:"varint,8,opt,name=strict_route,json=strictRoute,proto3" json:"strict_route,omitempty"`                  // If true, enforces strict routing.
	TunStack         string `protobuf:"bytes,9,opt,name=tun_stack,json=tunStack,proto3" json:"tun_stack,omitempty"`                            // Specifies the TUN stack to use.
}

func (x *InboundOptions) Reset() {
	*x = InboundOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundOptions) ProtoMessage() {}

func (x *InboundOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundOptions.ProtoReflect.Descriptor instead.
func (*InboundOptions) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{3}
}

func (x *InboundOptions) GetEnableTun() bool {
	if x != nil {
		return x.EnableTun
	}
	return false
}

func (x *InboundOptions) GetEnableTunService() bool {
	if x != nil {
		return x.EnableTunService
	}
	return false
}

func (x *InboundOptions) GetSetSystemProxy() bool {
	if x != nil {
		return x.SetSystemProxy
	}
	return false
}

func (x *InboundOptions) GetMixedPort() uint32 {
	if x != nil {
		return x.MixedPort
	}
	return 0
}

func (x *InboundOptions) GetTproxyPort() uint32 {
	if x != nil {
		return x.TproxyPort
	}
	return 0
}

func (x *InboundOptions) GetLocalDnsPort() uint32 {
	if x != nil {
		return x.LocalDnsPort
	}
	return 0
}

func (x *InboundOptions) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *InboundOptions) GetStrictRoute() bool {
	if x != nil {
		return x.StrictRoute
	}
	return false
}

func (x *InboundOptions) GetTunStack() string {
	if x != nil {
		return x.TunStack
	}
	return ""
}

// *
// URLTestOptions defines the configuration options for URL testing.
type URLTestOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionTestUrl string `protobuf:"bytes,1,opt,name=connection_test_url,json=connectionTestUrl,proto3" json:"connection_test_url,omitempty"` // URL used for connection testing.
	UrlTestInterval   int64  `protobuf:"varint,2,opt,name=url_test_interval,json=urlTestInterval,proto3" json:"url_test_interval,omitempty"`      // Interval for URL tests in milliseconds.
}

func (x *URLTestOptions) Reset() {
	*x = URLTestOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLTestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLTestOptions) ProtoMessage() {}

func (x *URLTestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLTestOptions.ProtoReflect.Descriptor instead.
func (*URLTestOptions) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{4}
}

func (x *URLTestOptions) GetConnectionTestUrl() string {
	if x != nil {
		return x.ConnectionTestUrl
	}
	return ""
}

func (x *URLTestOptions) GetUrlTestInterval() int64 {
	if x != nil {
		return x.UrlTestInterval
	}
	return 0
}

// *
// RouteOptions defines options related to traffic routing.
type RouteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolveDestination     bool           `protobuf:"varint,1,opt,name=resolve_destination,json=resolveDestination,proto3" json:"resolve_destination,omitempty"`                 // If true, resolves the destination address.
	Ipv6Mode               DomainStrategy `protobuf:"varint,2,opt,name=ipv6_mode,json=ipv6Mode,proto3,enum=hiddifyoptions.DomainStrategy" json:"ipv6_mode,omitempty"`            // Strategy for handling IPv6 addresses.
	BypassLan              bool           `protobuf:"varint,3,opt,name=bypass_lan,json=bypassLan,proto3" json:"bypass_lan,omitempty"`                                            // If true, bypasses LAN connections.
	AllowConnectionFromLan bool           `protobuf:"varint,4,opt,name=allow_connection_from_lan,json=allowConnectionFromLan,proto3" json:"allow_connection_from_lan,omitempty"` // If true, allows connections from LAN.
}

func (x *RouteOptions) Reset() {
	*x = RouteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOptions) ProtoMessage() {}

func (x *RouteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOptions.ProtoReflect.Descriptor instead.
func (*RouteOptions) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{5}
}

func (x *RouteOptions) GetResolveDestination() bool {
	if x != nil {
		return x.ResolveDestination
	}
	return false
}

func (x *RouteOptions) GetIpv6Mode() DomainStrategy {
	if x != nil {
		return x.Ipv6Mode
	}
	return DomainStrategy_as_is
}

func (x *RouteOptions) GetBypassLan() bool {
	if x != nil {
		return x.BypassLan
	}
	return false
}

func (x *RouteOptions) GetAllowConnectionFromLan() bool {
	if x != nil {
		return x.AllowConnectionFromLan
	}
	return false
}

// *
// TLSTricks defines options for TLS tricks to obfuscate traffic.
type TLSTricks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableFragment bool      `protobuf:"varint,1,opt,name=enable_fragment,json=enableFragment,proto3" json:"enable_fragment,omitempty"` // If true, enables fragmentation of packets.
	FragmentSize   *IntRange `protobuf:"bytes,2,opt,name=fragment_size,json=fragmentSize,proto3" json:"fragment_size,omitempty"`        // Size of fragments to be used.
	FragmentSleep  *IntRange `protobuf:"bytes,3,opt,name=fragment_sleep,json=fragmentSleep,proto3" json:"fragment_sleep,omitempty"`     // Sleep time between fragments.
	MixedSniCase   bool      `protobuf:"varint,4,opt,name=mixed_sni_case,json=mixedSniCase,proto3" json:"mixed_sni_case,omitempty"`     // If true, enables mixed SNI case for obfuscation.
	EnablePadding  bool      `protobuf:"varint,5,opt,name=enable_padding,json=enablePadding,proto3" json:"enable_padding,omitempty"`    // If true, enables padding of packets.
	PaddingSize    *IntRange `protobuf:"bytes,6,opt,name=padding_size,json=paddingSize,proto3" json:"padding_size,omitempty"`           // Size of padding to be used.
}

func (x *TLSTricks) Reset() {
	*x = TLSTricks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSTricks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSTricks) ProtoMessage() {}

func (x *TLSTricks) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSTricks.ProtoReflect.Descriptor instead.
func (*TLSTricks) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{6}
}

func (x *TLSTricks) GetEnableFragment() bool {
	if x != nil {
		return x.EnableFragment
	}
	return false
}

func (x *TLSTricks) GetFragmentSize() *IntRange {
	if x != nil {
		return x.FragmentSize
	}
	return nil
}

func (x *TLSTricks) GetFragmentSleep() *IntRange {
	if x != nil {
		return x.FragmentSleep
	}
	return nil
}

func (x *TLSTricks) GetMixedSniCase() bool {
	if x != nil {
		return x.MixedSniCase
	}
	return false
}

func (x *TLSTricks) GetEnablePadding() bool {
	if x != nil {
		return x.EnablePadding
	}
	return false
}

func (x *TLSTricks) GetPaddingSize() *IntRange {
	if x != nil {
		return x.PaddingSize
	}
	return nil
}

// *
// MuxOptions defines options for multiplexing connections.
type MuxOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable     bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`                           // If true, enables multiplexing.
	Padding    bool   `protobuf:"varint,2,opt,name=padding,proto3" json:"padding,omitempty"`                         // If true, enables padding for multiplexed connections.
	MaxStreams int32  `protobuf:"varint,3,opt,name=max_streams,json=maxStreams,proto3" json:"max_streams,omitempty"` // Maximum number of streams allowed (using int32).
	Protocol   string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`                        // Protocol used for multiplexing.
}

func (x *MuxOptions) Reset() {
	*x = MuxOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuxOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuxOptions) ProtoMessage() {}

func (x *MuxOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuxOptions.ProtoReflect.Descriptor instead.
func (*MuxOptions) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{7}
}

func (x *MuxOptions) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *MuxOptions) GetPadding() bool {
	if x != nil {
		return x.Padding
	}
	return false
}

func (x *MuxOptions) GetMaxStreams() int32 {
	if x != nil {
		return x.MaxStreams
	}
	return 0
}

func (x *MuxOptions) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// *
// WarpOptions defines configuration options for Warp.
type WarpOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // Unique identifier for the Warp configuration.
	EnableWarp      bool                 `protobuf:"varint,2,opt,name=enable_warp,json=enableWarp,proto3" json:"enable_warp,omitempty"`                 // If true, enables Warp functionality.
	Mode            string               `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`                                                // Operating mode for Warp.
	WireguardConfig *WarpWireguardConfig `protobuf:"bytes,5,opt,name=wireguard_config,json=wireguardConfig,proto3" json:"wireguard_config,omitempty"`   // Configuration for WireGuard (defined elsewhere).
	FakePackets     string               `protobuf:"bytes,6,opt,name=fake_packets,json=fakePackets,proto3" json:"fake_packets,omitempty"`               // Fake packet configuration.
	FakePacketSize  *IntRange            `protobuf:"bytes,7,opt,name=fake_packet_size,json=fakePacketSize,proto3" json:"fake_packet_size,omitempty"`    // Size of fake packets.
	FakePacketDelay *IntRange            `protobuf:"bytes,8,opt,name=fake_packet_delay,json=fakePacketDelay,proto3" json:"fake_packet_delay,omitempty"` // Delay for sending fake packets.
	FakePacketMode  string               `protobuf:"bytes,9,opt,name=fake_packet_mode,json=fakePacketMode,proto3" json:"fake_packet_mode,omitempty"`    // Mode for sending fake packets.
	CleanIp         string               `protobuf:"bytes,10,opt,name=clean_ip,json=cleanIp,proto3" json:"clean_ip,omitempty"`                          // Clean IP address to use.
	CleanPort       uint32               `protobuf:"varint,11,opt,name=clean_port,json=cleanPort,proto3" json:"clean_port,omitempty"`                   // Port for clean traffic (using uint32 for compatibility).
	Account         *WarpAccount         `protobuf:"bytes,12,opt,name=account,proto3" json:"account,omitempty"`                                         // Account details for Warp (defined elsewhere).
}

func (x *WarpOptions) Reset() {
	*x = WarpOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarpOptions) ProtoMessage() {}

func (x *WarpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarpOptions.ProtoReflect.Descriptor instead.
func (*WarpOptions) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{8}
}

func (x *WarpOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WarpOptions) GetEnableWarp() bool {
	if x != nil {
		return x.EnableWarp
	}
	return false
}

func (x *WarpOptions) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *WarpOptions) GetWireguardConfig() *WarpWireguardConfig {
	if x != nil {
		return x.WireguardConfig
	}
	return nil
}

func (x *WarpOptions) GetFakePackets() string {
	if x != nil {
		return x.FakePackets
	}
	return ""
}

func (x *WarpOptions) GetFakePacketSize() *IntRange {
	if x != nil {
		return x.FakePacketSize
	}
	return nil
}

func (x *WarpOptions) GetFakePacketDelay() *IntRange {
	if x != nil {
		return x.FakePacketDelay
	}
	return nil
}

func (x *WarpOptions) GetFakePacketMode() string {
	if x != nil {
		return x.FakePacketMode
	}
	return ""
}

func (x *WarpOptions) GetCleanIp() string {
	if x != nil {
		return x.CleanIp
	}
	return ""
}

func (x *WarpOptions) GetCleanPort() uint32 {
	if x != nil {
		return x.CleanPort
	}
	return 0
}

func (x *WarpOptions) GetAccount() *WarpAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

// *
// WarpAccount defines account details for Warp.
type WarpAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`       // Unique account identifier.
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // Access token for the account.
}

func (x *WarpAccount) Reset() {
	*x = WarpAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarpAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarpAccount) ProtoMessage() {}

func (x *WarpAccount) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarpAccount.ProtoReflect.Descriptor instead.
func (*WarpAccount) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{9}
}

func (x *WarpAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WarpAccount) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// *
// WarpWireguardConfig defines the configuration details for WireGuard.
type WarpWireguardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey       string `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`                     // Private key for WireGuard.
	LocalAddressIpv4 string `protobuf:"bytes,2,opt,name=local_address_ipv4,json=localAddressIpv4,proto3" json:"local_address_ipv4,omitempty"` // Local IPv4 address for WireGuard.
	LocalAddressIpv6 string `protobuf:"bytes,3,opt,name=local_address_ipv6,json=localAddressIpv6,proto3" json:"local_address_ipv6,omitempty"` // Local IPv6 address for WireGuard.
	PeerPublicKey    string `protobuf:"bytes,4,opt,name=peer_public_key,json=peerPublicKey,proto3" json:"peer_public_key,omitempty"`          // Peer public key for WireGuard.
	ClientId         string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                           // Client identifier for WireGuard.
}

func (x *WarpWireguardConfig) Reset() {
	*x = WarpWireguardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarpWireguardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarpWireguardConfig) ProtoMessage() {}

func (x *WarpWireguardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarpWireguardConfig.ProtoReflect.Descriptor instead.
func (*WarpWireguardConfig) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{10}
}

func (x *WarpWireguardConfig) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *WarpWireguardConfig) GetLocalAddressIpv4() string {
	if x != nil {
		return x.LocalAddressIpv4
	}
	return ""
}

func (x *WarpWireguardConfig) GetLocalAddressIpv6() string {
	if x != nil {
		return x.LocalAddressIpv6
	}
	return ""
}

func (x *WarpWireguardConfig) GetPeerPublicKey() string {
	if x != nil {
		return x.PeerPublicKey
	}
	return ""
}

func (x *WarpWireguardConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// *
// Rule defines routing rules for managing traffic.
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleSetUrl string `protobuf:"bytes,1,opt,name=rule_set_url,json=ruleSetUrl,proto3" json:"rule_set_url,omitempty"` // URL of the rule set.
	Domains    string `protobuf:"bytes,2,opt,name=domains,proto3" json:"domains,omitempty"`                           // List of domains affected by this rule.
	Ip         string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`                                     // IP address associated with this rule.
	Port       string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`                                 // Port number associated with this rule.
	Network    string `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`                           // Network type (e.g., IPv4, IPv6).
	Protocol   string `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`                         // Protocol type (e.g., TCP, UDP).
	Outbound   string `protobuf:"bytes,7,opt,name=outbound,proto3" json:"outbound,omitempty"`                         // Outbound traffic handling (e.g., allow, deny).
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP(), []int{11}
}

func (x *Rule) GetRuleSetUrl() string {
	if x != nil {
		return x.RuleSetUrl
	}
	return ""
}

func (x *Rule) GetDomains() string {
	if x != nil {
		return x.Domains
	}
	return ""
}

func (x *Rule) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Rule) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Rule) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Rule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Rule) GetOutbound() string {
	if x != nil {
		return x.Outbound
	}
	return ""
}

var File_v2_hiddifyoptions_hiddify_options_proto protoreflect.FileDescriptor

var file_v2_hiddifyoptions_hiddify_options_proto_rawDesc = []byte{
	0x0a, 0x27, 0x76, 0x32, 0x2f, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x68, 0x69, 0x64, 0x64, 0x69,
	0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x06, 0x0a, 0x0e, 0x48, 0x69,
	0x64, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x70, 0x69, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x61, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x78, 0x72,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65,
	0x58, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x57, 0x61, 0x72, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x77, 0x61, 0x72,
	0x70, 0x12, 0x31, 0x0a, 0x05, 0x77, 0x61, 0x72, 0x70, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x57, 0x61, 0x72, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x77,
	0x61, 0x72, 0x70, 0x32, 0x12, 0x2c, 0x0a, 0x03, 0x6d, 0x75, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4d, 0x75, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x6d,
	0x75, 0x78, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x4c, 0x53, 0x54, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x6e, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x4e, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64,
	0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x52,
	0x4c, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x75, 0x72,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x2e, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0xac, 0x03, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x1a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x6e, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x1a, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x69,
	0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x17, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x44, 0x6e, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x6b, 0x65, 0x44, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6e, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xbf,
	0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6e, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x22, 0x6c, 0x0a, 0x0e, 0x55, 0x52, 0x4c, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75,
	0x72, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xd6,
	0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x4c, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x19,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x6e, 0x22, 0xbe, 0x02, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x54,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x6e, 0x69, 0x5f, 0x63, 0x61, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x53, 0x6e, 0x69,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7b, 0x0a, 0x0a, 0x4d, 0x75, 0x78, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xea, 0x03, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x77, 0x61, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x57, 0x61, 0x72, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x77, 0x69,
	0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x61, 0x72, 0x70, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x77, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61,
	0x6b, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x10, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66,
	0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x66, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x44, 0x0a, 0x11, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x66, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6b, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x61,
	0x72, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x72, 0x70, 0x57, 0x69, 0x72, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x34, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb8, 0x01,
	0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2a, 0x5b, 0x0a, 0x0e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x73,
	0x5f, 0x69, 0x73, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x10, 0x04, 0x42, 0x5b, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x69, 0x64,
	0x64, 0x69, 0x66, 0x79, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x69, 0x64, 0x64,
	0x69, 0x66, 0x79, 0x2f, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x68, 0x69, 0x64, 0x64, 0x69, 0x66, 0x79, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v2_hiddifyoptions_hiddify_options_proto_rawDescOnce sync.Once
	file_v2_hiddifyoptions_hiddify_options_proto_rawDescData = file_v2_hiddifyoptions_hiddify_options_proto_rawDesc
)

func file_v2_hiddifyoptions_hiddify_options_proto_rawDescGZIP() []byte {
	file_v2_hiddifyoptions_hiddify_options_proto_rawDescOnce.Do(func() {
		file_v2_hiddifyoptions_hiddify_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_v2_hiddifyoptions_hiddify_options_proto_rawDescData)
	})
	return file_v2_hiddifyoptions_hiddify_options_proto_rawDescData
}

var file_v2_hiddifyoptions_hiddify_options_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v2_hiddifyoptions_hiddify_options_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v2_hiddifyoptions_hiddify_options_proto_goTypes = []any{
	(DomainStrategy)(0),         // 0: hiddifyoptions.DomainStrategy
	(*HiddifyOptions)(nil),      // 1: hiddifyoptions.HiddifyOptions
	(*IntRange)(nil),            // 2: hiddifyoptions.IntRange
	(*DNSOptions)(nil),          // 3: hiddifyoptions.DNSOptions
	(*InboundOptions)(nil),      // 4: hiddifyoptions.InboundOptions
	(*URLTestOptions)(nil),      // 5: hiddifyoptions.URLTestOptions
	(*RouteOptions)(nil),        // 6: hiddifyoptions.RouteOptions
	(*TLSTricks)(nil),           // 7: hiddifyoptions.TLSTricks
	(*MuxOptions)(nil),          // 8: hiddifyoptions.MuxOptions
	(*WarpOptions)(nil),         // 9: hiddifyoptions.WarpOptions
	(*WarpAccount)(nil),         // 10: hiddifyoptions.WarpAccount
	(*WarpWireguardConfig)(nil), // 11: hiddifyoptions.WarpWireguardConfig
	(*Rule)(nil),                // 12: hiddifyoptions.Rule
}
var file_v2_hiddifyoptions_hiddify_options_proto_depIdxs = []int32{
	12, // 0: hiddifyoptions.HiddifyOptions.rules:type_name -> hiddifyoptions.Rule
	9,  // 1: hiddifyoptions.HiddifyOptions.warp:type_name -> hiddifyoptions.WarpOptions
	9,  // 2: hiddifyoptions.HiddifyOptions.warp2:type_name -> hiddifyoptions.WarpOptions
	8,  // 3: hiddifyoptions.HiddifyOptions.mux:type_name -> hiddifyoptions.MuxOptions
	7,  // 4: hiddifyoptions.HiddifyOptions.tls_tricks:type_name -> hiddifyoptions.TLSTricks
	3,  // 5: hiddifyoptions.HiddifyOptions.dns_options:type_name -> hiddifyoptions.DNSOptions
	4,  // 6: hiddifyoptions.HiddifyOptions.inbound_options:type_name -> hiddifyoptions.InboundOptions
	5,  // 7: hiddifyoptions.HiddifyOptions.url_test_options:type_name -> hiddifyoptions.URLTestOptions
	6,  // 8: hiddifyoptions.HiddifyOptions.route_options:type_name -> hiddifyoptions.RouteOptions
	0,  // 9: hiddifyoptions.DNSOptions.remote_dns_domain_strategy:type_name -> hiddifyoptions.DomainStrategy
	0,  // 10: hiddifyoptions.DNSOptions.direct_dns_domain_strategy:type_name -> hiddifyoptions.DomainStrategy
	0,  // 11: hiddifyoptions.RouteOptions.ipv6_mode:type_name -> hiddifyoptions.DomainStrategy
	2,  // 12: hiddifyoptions.TLSTricks.fragment_size:type_name -> hiddifyoptions.IntRange
	2,  // 13: hiddifyoptions.TLSTricks.fragment_sleep:type_name -> hiddifyoptions.IntRange
	2,  // 14: hiddifyoptions.TLSTricks.padding_size:type_name -> hiddifyoptions.IntRange
	11, // 15: hiddifyoptions.WarpOptions.wireguard_config:type_name -> hiddifyoptions.WarpWireguardConfig
	2,  // 16: hiddifyoptions.WarpOptions.fake_packet_size:type_name -> hiddifyoptions.IntRange
	2,  // 17: hiddifyoptions.WarpOptions.fake_packet_delay:type_name -> hiddifyoptions.IntRange
	10, // 18: hiddifyoptions.WarpOptions.account:type_name -> hiddifyoptions.WarpAccount
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_v2_hiddifyoptions_hiddify_options_proto_init() }
func file_v2_hiddifyoptions_hiddify_options_proto_init() {
	if File_v2_hiddifyoptions_hiddify_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HiddifyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IntRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DNSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*InboundOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*URLTestOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RouteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TLSTricks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MuxOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*WarpOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*WarpAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*WarpWireguardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_hiddifyoptions_hiddify_options_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_hiddifyoptions_hiddify_options_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v2_hiddifyoptions_hiddify_options_proto_goTypes,
		DependencyIndexes: file_v2_hiddifyoptions_hiddify_options_proto_depIdxs,
		EnumInfos:         file_v2_hiddifyoptions_hiddify_options_proto_enumTypes,
		MessageInfos:      file_v2_hiddifyoptions_hiddify_options_proto_msgTypes,
	}.Build()
	File_v2_hiddifyoptions_hiddify_options_proto = out.File
	file_v2_hiddifyoptions_hiddify_options_proto_rawDesc = nil
	file_v2_hiddifyoptions_hiddify_options_proto_goTypes = nil
	file_v2_hiddifyoptions_hiddify_options_proto_depIdxs = nil
}
