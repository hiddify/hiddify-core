// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: v2/profile/profile_service.proto

package profile

import (
	context "context"
	hcommon "github.com/hiddify/hiddify-core/v2/hcommon"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileService_GetProfile_FullMethodName       = "/profile.ProfileService/GetProfile"
	ProfileService_UpdateProfile_FullMethodName    = "/profile.ProfileService/UpdateProfile"
	ProfileService_GetAllProfiles_FullMethodName   = "/profile.ProfileService/GetAllProfiles"
	ProfileService_GetActiveProfile_FullMethodName = "/profile.ProfileService/GetActiveProfile"
	ProfileService_SetActiveProfile_FullMethodName = "/profile.ProfileService/SetActiveProfile"
	ProfileService_AddProfile_FullMethodName       = "/profile.ProfileService/AddProfile"
	ProfileService_DeleteProfile_FullMethodName    = "/profile.ProfileService/DeleteProfile"
)

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// ProfileService defines the RPC methods available for managing profiles.
type ProfileServiceClient interface {
	// *
	// GetProfile fetches a profile by ID, name, or URL.
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// *
	// UpdateProfile updates an existing profile.
	UpdateProfile(ctx context.Context, in *ProfileEntity, opts ...grpc.CallOption) (*ProfileResponse, error)
	// *
	// GetAllProfiles fetches all profiles.
	GetAllProfiles(ctx context.Context, in *hcommon.Empty, opts ...grpc.CallOption) (*MultiProfilesResponse, error)
	// *
	// GetActiveProfile retrieves the currently active profile.
	GetActiveProfile(ctx context.Context, in *hcommon.Empty, opts ...grpc.CallOption) (*ProfileResponse, error)
	// *
	// SetActiveProfile sets a profile as active, identified by ID, name, or URL.
	SetActiveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*hcommon.Response, error)
	// *
	// AddProfile adds a new profile using either a URL or the raw profile content.
	AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// *
	// DeleteProfile deletes a profile identified by ID, name, or URL.
	DeleteProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*hcommon.Response, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfile(ctx context.Context, in *ProfileEntity, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetAllProfiles(ctx context.Context, in *hcommon.Empty, opts ...grpc.CallOption) (*MultiProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiProfilesResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetAllProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetActiveProfile(ctx context.Context, in *hcommon.Empty, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetActiveProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) SetActiveProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*hcommon.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(hcommon.Response)
	err := c.cc.Invoke(ctx, ProfileService_SetActiveProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_AddProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeleteProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*hcommon.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(hcommon.Response)
	err := c.cc.Invoke(ctx, ProfileService_DeleteProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility.
//
// *
// ProfileService defines the RPC methods available for managing profiles.
type ProfileServiceServer interface {
	// *
	// GetProfile fetches a profile by ID, name, or URL.
	GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	// *
	// UpdateProfile updates an existing profile.
	UpdateProfile(context.Context, *ProfileEntity) (*ProfileResponse, error)
	// *
	// GetAllProfiles fetches all profiles.
	GetAllProfiles(context.Context, *hcommon.Empty) (*MultiProfilesResponse, error)
	// *
	// GetActiveProfile retrieves the currently active profile.
	GetActiveProfile(context.Context, *hcommon.Empty) (*ProfileResponse, error)
	// *
	// SetActiveProfile sets a profile as active, identified by ID, name, or URL.
	SetActiveProfile(context.Context, *ProfileRequest) (*hcommon.Response, error)
	// *
	// AddProfile adds a new profile using either a URL or the raw profile content.
	AddProfile(context.Context, *AddProfileRequest) (*ProfileResponse, error)
	// *
	// DeleteProfile deletes a profile identified by ID, name, or URL.
	DeleteProfile(context.Context, *ProfileRequest) (*hcommon.Response, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileServiceServer struct{}

func (UnimplementedProfileServiceServer) GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfileServiceServer) UpdateProfile(context.Context, *ProfileEntity) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServiceServer) GetAllProfiles(context.Context, *hcommon.Empty) (*MultiProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProfiles not implemented")
}
func (UnimplementedProfileServiceServer) GetActiveProfile(context.Context, *hcommon.Empty) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveProfile not implemented")
}
func (UnimplementedProfileServiceServer) SetActiveProfile(context.Context, *ProfileRequest) (*hcommon.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveProfile not implemented")
}
func (UnimplementedProfileServiceServer) AddProfile(context.Context, *AddProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (UnimplementedProfileServiceServer) DeleteProfile(context.Context, *ProfileRequest) (*hcommon.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}
func (UnimplementedProfileServiceServer) testEmbeddedByValue()                        {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, req.(*ProfileEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetAllProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hcommon.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetAllProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetAllProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetAllProfiles(ctx, req.(*hcommon.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetActiveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(hcommon.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetActiveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetActiveProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetActiveProfile(ctx, req.(*hcommon.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_SetActiveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).SetActiveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_SetActiveProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).SetActiveProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddProfile(ctx, req.(*AddProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeleteProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _ProfileService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetAllProfiles",
			Handler:    _ProfileService_GetAllProfiles_Handler,
		},
		{
			MethodName: "GetActiveProfile",
			Handler:    _ProfileService_GetActiveProfile_Handler,
		},
		{
			MethodName: "SetActiveProfile",
			Handler:    _ProfileService_SetActiveProfile_Handler,
		},
		{
			MethodName: "AddProfile",
			Handler:    _ProfileService_AddProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ProfileService_DeleteProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/profile/profile_service.proto",
}
